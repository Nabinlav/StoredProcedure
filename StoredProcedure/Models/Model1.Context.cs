//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StoredProcedure.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StudentDBEntities : DbContext
    {
        public StudentDBEntities()
            : base("name=StudentDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
    
        public virtual ObjectResult<tblProduct> AddProduct(string productname, Nullable<int> categoryid, Nullable<long> price, Nullable<long> quantity)
        {
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("AddProduct", productnameParameter, categoryidParameter, priceParameter, quantityParameter);
        }
    
        public virtual ObjectResult<tblProduct> AddProduct(string productname, Nullable<int> categoryid, Nullable<long> price, Nullable<long> quantity, MergeOption mergeOption)
        {
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("AddProduct", mergeOption, productnameParameter, categoryidParameter, priceParameter, quantityParameter);
        }
    
        public virtual ObjectResult<tblProduct> DeleteProduct(Nullable<int> productid)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("DeleteProduct", productidParameter);
        }
    
        public virtual ObjectResult<tblProduct> DeleteProduct(Nullable<int> productid, MergeOption mergeOption)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("DeleteProduct", mergeOption, productidParameter);
        }
    
        public virtual ObjectResult<tblProduct> ListAllProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("ListAllProduct");
        }
    
        public virtual ObjectResult<tblProduct> ListAllProduct(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("ListAllProduct", mergeOption);
        }
    
        public virtual ObjectResult<tblProduct> ListProductByID(Nullable<int> productid)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("ListProductByID", productidParameter);
        }
    
        public virtual ObjectResult<tblProduct> ListProductByID(Nullable<int> productid, MergeOption mergeOption)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("ListProductByID", mergeOption, productidParameter);
        }
    
        public virtual ObjectResult<tblProduct> UpdateProduct(Nullable<int> productid, string productname, Nullable<int> categoryid, Nullable<long> price, Nullable<long> quantity)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("UpdateProduct", productidParameter, productnameParameter, categoryidParameter, priceParameter, quantityParameter);
        }
    
        public virtual ObjectResult<tblProduct> UpdateProduct(Nullable<int> productid, string productname, Nullable<int> categoryid, Nullable<long> price, Nullable<long> quantity, MergeOption mergeOption)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblProduct>("UpdateProduct", mergeOption, productidParameter, productnameParameter, categoryidParameter, priceParameter, quantityParameter);
        }
    }
}
